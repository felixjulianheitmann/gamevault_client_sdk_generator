{
    "openapi": "3.0.0",
    "paths": {
        "/api/config/news": {
            "get": {
                "operationId": "getNews",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Health"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "returns the news.md file from the config directory.",
                "tags": [
                    "config"
                ]
            }
        },
        "/api/media/{id}": {
            "get": {
                "operationId": "getMediaByMediaId",
                "parameters": [
                    {
                        "name": "id",
                        "required": true,
                        "in": "path",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested media",
                        "content": {
                            "image/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Buffer"
                                }
                            },
                            "video/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Buffer"
                                }
                            },
                            "audio/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Buffer"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Retrieve media using its id",
                "tags": [
                    "media"
                ]
            }
        },
        "/api/media": {
            "post": {
                "description": "You can use the id of the uploaded media in subsequent requests.",
                "operationId": "postMedia",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The media file to upload"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The uploaded media",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Media"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Upload a media file to the server",
                "tags": [
                    "media"
                ]
            }
        },
        "/api/users": {
            "get": {
                "operationId": "getUsers",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamevaultUser"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get an overview of all users. admins can see hidden users using this endpoint aswell.",
                "tags": [
                    "user"
                ]
            }
        },
        "/api/users/me": {
            "get": {
                "operationId": "getUsersMe",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultUser"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get details of your user",
                "tags": [
                    "user"
                ]
            },
            "put": {
                "operationId": "putUsersMe",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultUser"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "update details of your user",
                "tags": [
                    "user"
                ]
            },
            "delete": {
                "operationId": "deleteUserMe",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultUser"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "delete your own user",
                "tags": [
                    "user"
                ]
            }
        },
        "/api/users/me/bookmark/{game_id}": {
            "post": {
                "operationId": "postUsersMeBookmark",
                "parameters": [
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "bookmark a game",
                "tags": [
                    "user"
                ]
            },
            "delete": {
                "operationId": "deleteUsersMeBookmark",
                "parameters": [
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "unbookmark a game",
                "tags": [
                    "user"
                ]
            }
        },
        "/api/users/{user_id}": {
            "get": {
                "operationId": "getUserByUserId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultUser"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get details on a user",
                "tags": [
                    "user"
                ]
            },
            "put": {
                "operationId": "putUserByUserId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultUser"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "update details of any user",
                "tags": [
                    "user"
                ]
            },
            "delete": {
                "operationId": "deleteUserByUserId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultUser"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "delete any user",
                "tags": [
                    "user"
                ]
            }
        },
        "/api/users/{user_id}/recover": {
            "post": {
                "operationId": "postUserRecoverByUserId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultUser"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "recover a deleted user",
                "tags": [
                    "user"
                ]
            }
        },
        "/api/users/register": {
            "post": {
                "description": "The user may may has to be activated afterwards to be active. This endpoint only works if registration is enabled",
                "operationId": "postUserRegister",
                "parameters": [],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterUserDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultUser"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "register a new user",
                "tags": [
                    "user"
                ]
            }
        },
        "/api/games/reindex": {
            "put": {
                "operationId": "putFilesReindex",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GamevaultGame"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "manually triggers an index of all games",
                "tags": [
                    "game"
                ]
            }
        },
        "/api/games": {
            "get": {
                "operationId": "getGames",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "page to retrieve",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "number of items per page to retrieve, default is 9007199254740991 (max safe integer)",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "search query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "sorting that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": "title:DESC"
                        }
                    },
                    {
                        "name": "filter",
                        "required": false,
                        "in": "query",
                        "description": "filters that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": [
                                "filter.early_access=$not:true"
                            ],
                            "type": "array",
                            "items": {}
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": [
                                        "data",
                                        "meta",
                                        "links"
                                    ],
                                    "allOf": [
                                        {
                                            "properties": {
                                                "data": {
                                                    "description": "paginated list of entities",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GamevaultGame"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/PaginatedEntity"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get a list of games",
                "tags": [
                    "game"
                ]
            }
        },
        "/api/games/random": {
            "get": {
                "operationId": "getGameRandom",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultGame"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get a random game",
                "tags": [
                    "game"
                ]
            }
        },
        "/api/games/{game_id}": {
            "get": {
                "operationId": "getGameByGameId",
                "parameters": [
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GamevaultGame"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get details on a game",
                "tags": [
                    "game"
                ]
            },
            "put": {
                "operationId": "putGameUpdate",
                "parameters": [
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGameDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "updates the details of a game",
                "tags": [
                    "game"
                ]
            }
        },
        "/api/games/{game_id}/download": {
            "get": {
                "operationId": "getGameDownload",
                "parameters": [
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "X-Download-Speed-Limit",
                        "required": false,
                        "in": "header",
                        "description": "This header lets you set the maximum download speed limit in kibibytes per second (kiB/s) for your request.  If the header is not present the download speed limit will be unlimited.",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "Range",
                        "required": false,
                        "in": "header",
                        "description": "This header lets you control the range of bytes to download. If the header is not present or not valid the entire file will be downloaded.",
                        "examples": {
                            "bytes=0-1023": {
                                "description": "Download the first 1024 bytes",
                                "value": "bytes=-1023"
                            },
                            "bytes=1024-2047": {
                                "description": "Download the bytes 1024 through 2047",
                                "value": "bytes=1024-2047"
                            },
                            "bytes=1024-": {
                                "description": "Download the bytes 1024 through the end of the file",
                                "value": "bytes=1024-"
                            }
                        },
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamableFile"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "download a game",
                "tags": [
                    "game"
                ]
            }
        },
        "/api/metadata/providers": {
            "get": {
                "operationId": "getProviders",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MetadataProviderDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Get a list of all registered metadata providers.",
                "tags": [
                    "metadata"
                ]
            }
        },
        "/api/metadata/providers/{provider_slug}/search": {
            "get": {
                "operationId": "getSearchResultsByProvider",
                "parameters": [
                    {
                        "name": "provider_slug",
                        "required": true,
                        "in": "path",
                        "description": "slug (url-friendly name) of the provider. This is the primary identifier. Must be formatted like a valid slug.",
                        "schema": {
                            "example": "igdb",
                            "type": "string"
                        }
                    },
                    {
                        "name": "query",
                        "required": true,
                        "in": "query",
                        "description": "Search Query. Usually it is the title of the game but specific providers may have their own syntax.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MinimalGameMetadataDto"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Search for games using a metadata provider.",
                "tags": [
                    "metadata"
                ]
            }
        },
        "/api/tags": {
            "get": {
                "description": "by default the list is sorted by the amount of games that are tagged with each tag.",
                "operationId": "getTags",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "page to retrieve",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "number of items per page to retrieve, default is 9007199254740991 (max safe integer)",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "search query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "sorting that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": "title:DESC"
                        }
                    },
                    {
                        "name": "filter",
                        "required": false,
                        "in": "query",
                        "description": "filters that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": [
                                "filter.early_access=$not:true"
                            ],
                            "type": "array",
                            "items": {}
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": [
                                        "data",
                                        "meta",
                                        "links"
                                    ],
                                    "allOf": [
                                        {
                                            "properties": {
                                                "data": {
                                                    "description": "paginated list of entities",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/TagMetadata"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/PaginatedEntity"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get a list of tags",
                "tags": [
                    "tags"
                ]
            }
        },
        "/api/genres": {
            "get": {
                "description": "by default the list is sorted by the amount of games that are in each genre.",
                "operationId": "getGenres",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "page to retrieve",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "number of items per page to retrieve, default is 9007199254740991 (max safe integer)",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "search query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "sorting that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": "title:DESC"
                        }
                    },
                    {
                        "name": "filter",
                        "required": false,
                        "in": "query",
                        "description": "filters that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": [
                                "filter.early_access=$not:true"
                            ],
                            "type": "array",
                            "items": {}
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": [
                                        "data",
                                        "meta",
                                        "links"
                                    ],
                                    "allOf": [
                                        {
                                            "properties": {
                                                "data": {
                                                    "description": "paginated list of entities",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/GenreMetadata"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/PaginatedEntity"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get a list of genres",
                "tags": [
                    "genres"
                ]
            }
        },
        "/api/publishers": {
            "get": {
                "description": "by default the list is sorted by the amount of games that are published by the publisher.",
                "operationId": "getPublishers",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "page to retrieve",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "number of items per page to retrieve, default is 9007199254740991 (max safe integer)",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "search query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "sorting that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": "title:DESC"
                        }
                    },
                    {
                        "name": "filter",
                        "required": false,
                        "in": "query",
                        "description": "filters that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": [
                                "filter.early_access=$not:true"
                            ],
                            "type": "array",
                            "items": {}
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": [
                                        "data",
                                        "meta",
                                        "links"
                                    ],
                                    "allOf": [
                                        {
                                            "properties": {
                                                "data": {
                                                    "description": "paginated list of entities",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/PublisherMetadata"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/PaginatedEntity"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get a list of publishers",
                "tags": [
                    "publishers"
                ]
            }
        },
        "/api/developers": {
            "get": {
                "description": "by default the list is sorted by the amount of games that are developed by the developer.",
                "operationId": "getDevelopers",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "page to retrieve",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "number of items per page to retrieve, default is 9007199254740991 (max safe integer)",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "search query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "sorting that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": "title:DESC"
                        }
                    },
                    {
                        "name": "filter",
                        "required": false,
                        "in": "query",
                        "description": "filters that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": [
                                "filter.early_access=$not:true"
                            ],
                            "type": "array",
                            "items": {}
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": [
                                        "data",
                                        "meta",
                                        "links"
                                    ],
                                    "allOf": [
                                        {
                                            "properties": {
                                                "data": {
                                                    "description": "paginated list of entities",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/DeveloperMetadata"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/PaginatedEntity"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get a list of developers",
                "tags": [
                    "developers"
                ]
            }
        },
        "/api/progresses/ignorefile": {
            "get": {
                "operationId": "getIgnoreFile",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/String"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get an array of files to ignore for progess-tracking",
                "tags": [
                    "progress"
                ]
            }
        },
        "/api/progresses": {
            "get": {
                "operationId": "getProgresses",
                "parameters": [
                    {
                        "name": "page",
                        "required": false,
                        "in": "query",
                        "description": "page to retrieve",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "limit",
                        "required": false,
                        "in": "query",
                        "description": "number of items per page to retrieve, default is 9007199254740991 (max safe integer)",
                        "schema": {
                            "type": "number"
                        }
                    },
                    {
                        "name": "search",
                        "required": false,
                        "in": "query",
                        "description": "search query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sortBy",
                        "required": false,
                        "in": "query",
                        "description": "sorting that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": "title:DESC"
                        }
                    },
                    {
                        "name": "filter",
                        "required": false,
                        "in": "query",
                        "description": "filters that should be applied. More info on: https://github.com/ppetzold/nestjs-paginate#usage",
                        "schema": {
                            "example": [
                                "filter.early_access=$not:true"
                            ],
                            "type": "array",
                            "items": {}
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "required": [
                                        "data",
                                        "meta",
                                        "links"
                                    ],
                                    "allOf": [
                                        {
                                            "properties": {
                                                "data": {
                                                    "description": "paginated list of entities",
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Progress"
                                                    }
                                                }
                                            }
                                        },
                                        {
                                            "$ref": "#/components/schemas/PaginatedEntity"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get a list of progresses",
                "tags": [
                    "progress"
                ]
            }
        },
        "/api/progresses/{progress_id}": {
            "get": {
                "deprecated": true,
                "operationId": "getProgressByProgressId",
                "parameters": [
                    {
                        "name": "progress_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the progress",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Progress"
                                    }
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get a specific progress by progress id. DEPRECATED: Use GET /user/:user_id/game/:game_id instead.",
                "tags": [
                    "progress"
                ]
            },
            "delete": {
                "deprecated": true,
                "description": "Only admins or the user who is associated to the progress can delete it. DEPRECATED: Use DELETE /user/:user_id/game/:game_id instead.",
                "operationId": "deleteProgressByProgressId",
                "parameters": [
                    {
                        "name": "progress_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the progress",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "delete a progress by progress id.",
                "tags": [
                    "progress"
                ]
            }
        },
        "/api/progresses/user/{user_id}/game/{game_id}": {
            "get": {
                "operationId": "getProgressByUserIdAndGameId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "get a specific game progress for a user",
                "tags": [
                    "progress"
                ]
            },
            "delete": {
                "description": "Only admins or the user who is associated to the progress can delete it.",
                "operationId": "deleteProgressByUserIdAndGameId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "delete a progress",
                "tags": [
                    "progress"
                ]
            },
            "put": {
                "operationId": "putProgressByUserIdAndGameId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateProgressDto"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "create or update a progress",
                "tags": [
                    "progress"
                ]
            }
        },
        "/api/progresses/user/{user_id}/game/{game_id}/increment": {
            "put": {
                "operationId": "putProgressByUserIdAndGameIdIncrementByOne",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Increment a specific game progress for a user by a minute",
                "tags": [
                    "progress"
                ]
            }
        },
        "/api/progresses/user/{user_id}/game/{game_id}/increment/{minutes}": {
            "put": {
                "operationId": "putProgressByUserIdAndGameIdIncrementByMinutes",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "minutes",
                        "required": true,
                        "in": "path",
                        "description": "the amount of minutes to increment the progress by",
                        "schema": {
                            "example": "1",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Increment a specific game progress for a user by x minutes",
                "tags": [
                    "progress"
                ]
            }
        },
        "/api/savefiles/user/{user_id}/game/{game_id}": {
            "post": {
                "description": "Only admins or the user who is associated to the savefile can upload a games save file. The savefile must be a .zip file. Installation ID is optional for multi-device tracking.",
                "operationId": "postSavefileByUserIdAndGameId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "X-Installation-Id",
                        "required": false,
                        "in": "header",
                        "description": "Optional installation identifier (UUID v4 format) for multi-device save management and uninstall-detection",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The save file to upload"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Upload a save file to the server",
                "tags": [
                    "savefile"
                ]
            },
            "get": {
                "description": "Only admins or the user who is associated to the savefile can download a games save file.",
                "operationId": "getSaveFileByUserIdAndGameId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested save file",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Buffer"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Download a save file from the server",
                "tags": [
                    "savefile"
                ]
            },
            "delete": {
                "description": "Only admins or the user who is associated to the savefile can delete a games save file.",
                "operationId": "deleteSaveFileByUserIdAndGameId",
                "parameters": [
                    {
                        "name": "user_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the user",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    },
                    {
                        "name": "game_id",
                        "required": true,
                        "in": "path",
                        "description": "id of the game",
                        "schema": {
                            "example": "1",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Delete a save file from the server",
                "tags": [
                    "savefile"
                ]
            }
        },
        "/api/admin/health": {
            "get": {
                "operationId": "getAdminHealth",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Health"
                                }
                            }
                        }
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "returns lifesign and additional server metrics for administrators",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/admin/database/backup": {
            "get": {
                "operationId": "getAdminDatabaseBackup",
                "parameters": [
                    {
                        "name": "X-Database-Password",
                        "required": true,
                        "in": "header",
                        "description": "This header should include the database password. Without the correct password, your request will be denied.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Create and download a database backup. This process will generate an unencrypted file containing all the data currently stored in the database, which can be restored at a later time.",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/admin/database/restore": {
            "post": {
                "operationId": "postAdminDatabaseRestore",
                "parameters": [
                    {
                        "name": "X-Database-Password",
                        "required": true,
                        "in": "header",
                        "description": "This header should include the database password. Without the correct password, your request will be denied.",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": ""
                    }
                },
                "security": [
                    {
                        "basic": []
                    }
                ],
                "summary": "Upload and restore a previously saved database dump. This action will replace all current data in the database.",
                "tags": [
                    "admin"
                ]
            }
        },
        "/api/health": {
            "get": {
                "operationId": "getHealth",
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Health"
                                }
                            }
                        }
                    }
                },
                "summary": "returns a lifesign",
                "tags": [
                    "health"
                ]
            }
        }
    },
    "info": {
        "title": "GameVault Backend Server",
        "description": "Backend for GameVault, the self-hosted gaming platform for drm-free games",
        "version": "14.1.1",
        "contact": {
            "name": "Phalcode",
            "url": "https://phalco.de",
            "email": "contact@phalco.de"
        },
        "license": {
            "name": "Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0)",
            "url": "https://github.com/Phalcode/gamevault-backend/LICENSE"
        }
    },
    "tags": [],
    "servers": [
        {
            "url": "http://localhost:8080",
            "description": "Local GameVault Server"
        },
        {
            "url": "https://demo.gamevau.lt",
            "description": "Demo GameVault Server"
        }
    ],
    "components": {
        "securitySchemes": {
            "basic": {
                "type": "http",
                "scheme": "basic"
            }
        },
        "schemas": {
            "HealthProtocolEntry": {
                "type": "object",
                "properties": {
                    "timestamp": {
                        "format": "date-time",
                        "type": "string",
                        "description": "Timestamp of the protocol entry",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status that was set",
                        "enum": [
                            "HEALTHY",
                            "UNHEALTHY"
                        ],
                        "example": "UNHEALTHY"
                    },
                    "reason": {
                        "type": "string",
                        "description": "Reason for the status to be set",
                        "example": "Database disconnected."
                    }
                },
                "required": [
                    "timestamp",
                    "status",
                    "reason"
                ]
            },
            "Health": {
                "type": "object",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Current status of the server",
                        "enum": [
                            "HEALTHY",
                            "UNHEALTHY"
                        ],
                        "example": "HEALTHY"
                    },
                    "version": {
                        "type": "string",
                        "description": "Server's version (Only visible to admins)",
                        "example": "1.0.0"
                    },
                    "uptime": {
                        "type": "number",
                        "description": "Server's uptime in seconds (Only visible to admins)",
                        "example": 300
                    },
                    "protocol": {
                        "description": "Server's health protocol (Only visible to admins)",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/HealthProtocolEntry"
                        }
                    }
                },
                "required": [
                    "status"
                ]
            },
            "Buffer": {
                "type": "string"
            },
            "Media": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "description": "Unique gamevault-identifier of the entity"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was created",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was updated",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was soft-deleted (null if not deleted)",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "entity_version": {
                        "type": "number",
                        "description": "incremental version number of the entity",
                        "example": 1
                    },
                    "source_url": {
                        "type": "string",
                        "example": "https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/Grand_Theft_Auto_logo_series.svg",
                        "description": "the original source URL of the media",
                        "pattern": "url"
                    },
                    "file_path": {
                        "type": "string",
                        "example": "/media/6e6ae60b-7102-4501-ba69-62bd6419b2e0.jpg",
                        "description": "the path of the media on the filesystem"
                    },
                    "type": {
                        "type": "string",
                        "example": "image/jpeg",
                        "description": "the media type of the media on the filesystem"
                    },
                    "uploader": {
                        "description": "the uploader of the media",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GamevaultUser"
                            }
                        ]
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "entity_version"
                ]
            },
            "PublisherMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "description": "Unique gamevault-identifier of the entity"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was created",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was updated",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was soft-deleted (null if not deleted)",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "entity_version": {
                        "type": "number",
                        "description": "incremental version number of the entity",
                        "example": 1
                    },
                    "provider_slug": {
                        "type": "string",
                        "description": "slug (url-friendly name) of the provider. This is the primary identifier. Must be formatted like a valid slug.",
                        "example": "igdb"
                    },
                    "provider_data_id": {
                        "type": "string",
                        "description": "id of the developer from the provider",
                        "example": "1190"
                    },
                    "name": {
                        "type": "string",
                        "example": "Rockstar Games",
                        "description": "name of the publisher"
                    },
                    "games": {
                        "description": "games published by the publisher",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameMetadata"
                        }
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "entity_version",
                    "provider_slug",
                    "provider_data_id",
                    "name"
                ]
            },
            "DeveloperMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "description": "Unique gamevault-identifier of the entity"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was created",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was updated",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was soft-deleted (null if not deleted)",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "entity_version": {
                        "type": "number",
                        "description": "incremental version number of the entity",
                        "example": 1
                    },
                    "provider_slug": {
                        "type": "string",
                        "description": "slug (url-friendly name) of the provider. This is the primary identifier. Must be formatted like a valid slug.",
                        "example": "igdb"
                    },
                    "provider_data_id": {
                        "type": "string",
                        "description": "id of the developer from the provider",
                        "example": "1190"
                    },
                    "name": {
                        "type": "string",
                        "example": "Rockstar North",
                        "description": "name of the developer"
                    },
                    "games": {
                        "description": "games developed by the developer",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameMetadata"
                        }
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "entity_version",
                    "provider_slug",
                    "provider_data_id",
                    "name"
                ]
            },
            "TagMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "description": "Unique gamevault-identifier of the entity"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was created",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was updated",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was soft-deleted (null if not deleted)",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "entity_version": {
                        "type": "number",
                        "description": "incremental version number of the entity",
                        "example": 1
                    },
                    "provider_slug": {
                        "type": "string",
                        "description": "slug (url-friendly name) of the provider. This is the primary identifier. Must be formatted like a valid slug.",
                        "example": "igdb"
                    },
                    "provider_data_id": {
                        "type": "string",
                        "description": "id of the developer from the provider",
                        "example": "1190"
                    },
                    "name": {
                        "type": "string",
                        "example": "battle-royale",
                        "description": "name of the tag"
                    },
                    "games": {
                        "description": "games tagged with the tag",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameMetadata"
                        }
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "entity_version",
                    "provider_slug",
                    "provider_data_id",
                    "name"
                ]
            },
            "GenreMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "description": "Unique gamevault-identifier of the entity"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was created",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was updated",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was soft-deleted (null if not deleted)",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "entity_version": {
                        "type": "number",
                        "description": "incremental version number of the entity",
                        "example": 1
                    },
                    "provider_slug": {
                        "type": "string",
                        "description": "slug (url-friendly name) of the provider. This is the primary identifier. Must be formatted like a valid slug.",
                        "example": "igdb"
                    },
                    "provider_data_id": {
                        "type": "string",
                        "description": "id of the developer from the provider",
                        "example": "1190"
                    },
                    "name": {
                        "type": "string",
                        "example": "Platformer",
                        "description": "name of the genre"
                    },
                    "games": {
                        "description": "games of the genre",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameMetadata"
                        }
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "entity_version",
                    "provider_slug",
                    "provider_data_id",
                    "name"
                ]
            },
            "GameMetadata": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "description": "Unique gamevault-identifier of the entity"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was created",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was updated",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was soft-deleted (null if not deleted)",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "entity_version": {
                        "type": "number",
                        "description": "incremental version number of the entity",
                        "example": 1
                    },
                    "gamevault_games": {
                        "description": "games the metadata belongs to",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GamevaultGame"
                        }
                    },
                    "provider_slug": {
                        "type": "string",
                        "description": "slug (url-friendly name) of the provider. This is the primary identifier. Must be formatted like a valid slug.",
                        "example": "igdb"
                    },
                    "provider_data_id": {
                        "type": "string",
                        "description": "id of the game from the provider",
                        "example": "Grand Theft Auto V"
                    },
                    "provider_data_url": {
                        "type": "string",
                        "description": "url of the game from the provider",
                        "example": "https://www.igdb.com/games/grand-theft-auto-v",
                        "pattern": "url"
                    },
                    "provider_priority": {
                        "type": "number",
                        "description": "optional priority override for this metadata",
                        "example": 1
                    },
                    "age_rating": {
                        "type": "number",
                        "description": "the minimum age required to play the game",
                        "example": 18,
                        "default": 0
                    },
                    "title": {
                        "type": "string",
                        "description": "title of the game",
                        "example": "Grand Theft Auto V"
                    },
                    "release_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "release date of the game",
                        "example": "2013-09-17T00:00:00.000Z"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the game. markdown supported.",
                        "example": "An open world action-adventure video game developed by **Rockstar North** and published by **Rockstar Games**."
                    },
                    "notes": {
                        "type": "string",
                        "description": "public notes from the admin for the game. markdown supported.",
                        "example": "# README \\n Install other game first!"
                    },
                    "average_playtime": {
                        "type": "number",
                        "description": "average playtime of other people in the game in minutes",
                        "example": 180
                    },
                    "cover": {
                        "description": "cover/boxart image of the game",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Media"
                            }
                        ]
                    },
                    "background": {
                        "description": "background image of the game",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Media"
                            }
                        ]
                    },
                    "url_screenshots": {
                        "description": "URLs of externally hosted screenshots of the game",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url_trailers": {
                        "description": "URLs of externally hosted trailer videos of the game",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url_gameplays": {
                        "description": "URLs of externally hosted gameplay videos of the game",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url_websites": {
                        "description": "URLs of websites of the game",
                        "example": "https://escapefromtarkov.com",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "rating": {
                        "type": "number",
                        "description": "rating of the provider",
                        "example": 90
                    },
                    "early_access": {
                        "type": "boolean",
                        "description": "indicates if the game is in early access",
                        "example": true
                    },
                    "launch_parameters": {
                        "type": "string",
                        "description": "Predefined launch parameters for the game.",
                        "example": "-fullscreen -dx11"
                    },
                    "launch_executable": {
                        "type": "string",
                        "description": "Predefined launch executable for the game.",
                        "example": "ShooterGame.exe"
                    },
                    "installer_executable": {
                        "type": "string",
                        "description": "Predefined installer executable for the game.",
                        "example": "setup.exe"
                    },
                    "publishers": {
                        "description": "publishers of the game",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/PublisherMetadata"
                        }
                    },
                    "developers": {
                        "description": "developers of the game",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DeveloperMetadata"
                        }
                    },
                    "tags": {
                        "description": "tags of the game",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/TagMetadata"
                        }
                    },
                    "genres": {
                        "description": "genres of the game",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GenreMetadata"
                        }
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "entity_version",
                    "provider_slug",
                    "title",
                    "early_access"
                ]
            },
            "GamevaultGame": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "description": "Unique gamevault-identifier of the entity"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was created",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was updated",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was soft-deleted (null if not deleted)",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "entity_version": {
                        "type": "number",
                        "description": "incremental version number of the entity",
                        "example": 1
                    },
                    "file_path": {
                        "type": "string",
                        "description": "file path to the game or the game manifest (relative to root)",
                        "example": "/files/Action/Grand Theft Auto V (v1.0.0).zip"
                    },
                    "size": {
                        "type": "string",
                        "description": "size of the game file in bytes",
                        "example": "1234567890"
                    },
                    "title": {
                        "type": "string",
                        "description": "title of the game (extracted from the filename')",
                        "example": "Grand Theft Auto V"
                    },
                    "sort_title": {
                        "type": "string",
                        "description": "sort title of the game, generated and used to optimize sorting.",
                        "example": "grand theft auto 5"
                    },
                    "version": {
                        "type": "string",
                        "description": "version tag (extracted from the filename e.g. '(v1.0.0)')",
                        "example": "v1.0.0"
                    },
                    "release_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "release date of the game (extracted from filename e.g. '(2013)')",
                        "example": "2013-01-01T00:00:00.000Z"
                    },
                    "early_access": {
                        "type": "boolean",
                        "description": "indicates if the game is an early access title (extracted from filename e.g. '(EA)')",
                        "example": true,
                        "default": false
                    },
                    "download_count": {
                        "type": "number",
                        "description": "Indicates how many times the game has been downloaded on this server.",
                        "example": 10,
                        "default": 0
                    },
                    "type": {
                        "type": "string",
                        "description": "type of the game, see https://gamevau.lt/docs/server-docs/game-types for all possible values",
                        "enum": [
                            "UNDETECTABLE",
                            "WINDOWS_SETUP",
                            "WINDOWS_PORTABLE",
                            "LINUX_PORTABLE"
                        ],
                        "example": "WINDOWS_PORTABLE"
                    },
                    "provider_metadata": {
                        "description": "metadata of various providers associated to the game",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GameMetadata"
                        }
                    },
                    "user_metadata": {
                        "description": "user-defined metadata of the game",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GameMetadata"
                            }
                        ]
                    },
                    "metadata": {
                        "description": "effective and merged metadata of the game",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GameMetadata"
                            }
                        ]
                    },
                    "progresses": {
                        "description": "progresses associated to the game",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Progress"
                        }
                    },
                    "bookmarked_users": {
                        "description": "users that bookmarked this game",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GamevaultGame"
                        }
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "entity_version",
                    "file_path",
                    "size",
                    "early_access",
                    "download_count",
                    "type"
                ]
            },
            "Progress": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "description": "Unique gamevault-identifier of the entity"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was created",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was updated",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was soft-deleted (null if not deleted)",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "entity_version": {
                        "type": "number",
                        "description": "incremental version number of the entity",
                        "example": 1
                    },
                    "user": {
                        "description": "user the progress belongs to",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GamevaultUser"
                            }
                        ]
                    },
                    "game": {
                        "description": "game the progress belongs to",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/GamevaultGame"
                            }
                        ]
                    },
                    "minutes_played": {
                        "type": "number",
                        "description": "playtime in minutes",
                        "example": 25
                    },
                    "state": {
                        "type": "string",
                        "description": "state of the game progress",
                        "enum": [
                            "UNPLAYED",
                            "INFINITE",
                            "PLAYING",
                            "COMPLETED",
                            "ABORTED_TEMPORARY",
                            "ABORTED_PERMANENT"
                        ],
                        "example": "PLAYING"
                    },
                    "last_played_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the progress was updated",
                        "example": "2020-01-01T00:00:00.000Z"
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "entity_version",
                    "minutes_played",
                    "state"
                ]
            },
            "GamevaultUser": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "number",
                        "example": 1,
                        "description": "Unique gamevault-identifier of the entity"
                    },
                    "created_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was created",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "updated_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was updated",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "deleted_at": {
                        "format": "date-time",
                        "type": "string",
                        "description": "date the entity was soft-deleted (null if not deleted)",
                        "example": "2021-01-01T00:00:00.000Z"
                    },
                    "entity_version": {
                        "type": "number",
                        "description": "incremental version number of the entity",
                        "example": 1
                    },
                    "username": {
                        "type": "string",
                        "example": "JohnDoe",
                        "description": "username of the user"
                    },
                    "password": {
                        "type": "string",
                        "description": "encrypted password of the user",
                        "example": "Hunter2"
                    },
                    "socket_secret": {
                        "type": "string",
                        "description": "the user's socket secret is used for authentication with the server over the websocket protocol.",
                        "example": "fd9c4f417fb494aeacef28a70eba95128d9f2521374852cdb12ecb746888b892"
                    },
                    "avatar": {
                        "description": "the user's avatar image",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Media"
                            }
                        ]
                    },
                    "background": {
                        "description": "the user's profile background image",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Media"
                            }
                        ]
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@mail.com",
                        "description": "email address of the user"
                    },
                    "first_name": {
                        "type": "string",
                        "example": "John",
                        "description": "first name of the user"
                    },
                    "last_name": {
                        "type": "string",
                        "example": "Doe",
                        "description": "last name of the user"
                    },
                    "birth_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "birthday of the user",
                        "example": "2013-09-17T00:00:00.000Z"
                    },
                    "activated": {
                        "type": "boolean",
                        "description": "indicates if the user is activated",
                        "example": false
                    },
                    "progresses": {
                        "description": "progresses of the user",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Progress"
                        }
                    },
                    "role": {
                        "type": "number",
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "example": 2,
                        "description": "The role determines the set of permissions and access rights for a user in the system."
                    },
                    "uploaded_media": {
                        "description": "media uploaded by this user",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Media"
                        }
                    },
                    "bookmarked_games": {
                        "description": "games bookmarked by this user",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/GamevaultGame"
                        }
                    }
                },
                "required": [
                    "id",
                    "created_at",
                    "entity_version",
                    "username",
                    "activated",
                    "role"
                ]
            },
            "UpdateUserDto": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "example": "JohnDoe",
                        "description": "username of the user"
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@mail.com",
                        "description": "email of the user"
                    },
                    "password": {
                        "type": "string",
                        "example": "SecretPw822!",
                        "minLength": 8,
                        "description": "password of the user"
                    },
                    "first_name": {
                        "type": "string",
                        "example": "John",
                        "description": "first name of the user"
                    },
                    "last_name": {
                        "type": "string",
                        "example": "Doe",
                        "description": "last name of the user"
                    },
                    "birth_date": {
                        "type": "string",
                        "description": "date of birth of the user in ISO8601 format"
                    },
                    "avatar_id": {
                        "type": "number",
                        "example": 69420,
                        "description": "id of the avatar image of the user"
                    },
                    "background_id": {
                        "type": "number",
                        "example": 69420,
                        "description": "id of the background image of the User"
                    },
                    "activated": {
                        "type": "boolean",
                        "pattern": "boolean",
                        "example": true,
                        "description": "wether or not the user is activated. Not yet working."
                    },
                    "role": {
                        "type": "number",
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "example": 2,
                        "description": "The role determines the set of permissions and access rights for a user in the system."
                    }
                }
            },
            "RegisterUserDto": {
                "type": "object",
                "properties": {
                    "username": {
                        "type": "string",
                        "example": "JohnDoe",
                        "description": "username of the user"
                    },
                    "password": {
                        "type": "string",
                        "example": "SecretPw822!",
                        "minLength": 8,
                        "description": "password of the user"
                    },
                    "email": {
                        "type": "string",
                        "example": "john.doe@mail.com",
                        "description": "email of the user"
                    },
                    "first_name": {
                        "type": "string",
                        "example": "John",
                        "description": "first name of the user"
                    },
                    "last_name": {
                        "type": "string",
                        "example": "Doe",
                        "description": "last name of the user"
                    },
                    "birth_date": {
                        "type": "string",
                        "description": "date of birth of the user in ISO8601 format"
                    }
                },
                "required": [
                    "username",
                    "password"
                ]
            },
            "Metadata": {
                "type": "object",
                "properties": {
                    "itemsPerPage": {
                        "type": "number",
                        "example": 50,
                        "description": "amount of items per page"
                    },
                    "totalItems": {
                        "type": "number",
                        "example": 5000,
                        "description": "total amount of items"
                    },
                    "currentPage": {
                        "type": "number",
                        "example": 5,
                        "description": "current page number"
                    },
                    "totalPages": {
                        "type": "number",
                        "example": 12,
                        "description": "total number of pages"
                    },
                    "sortBy": {
                        "description": "sorting that was applied by the query",
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "searchBy": {
                        "description": "searches that were applied by the query",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "search": {
                        "type": "string",
                        "description": "search query"
                    },
                    "select": {
                        "description": "select string",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "filter": {
                        "type": "object",
                        "description": "filters that were applied by the query"
                    }
                },
                "required": [
                    "itemsPerPage",
                    "totalItems",
                    "currentPage",
                    "totalPages",
                    "sortBy"
                ]
            },
            "Links": {
                "type": "object",
                "properties": {
                    "first": {
                        "type": "string",
                        "example": "http://localhost:8080/games?limit=5&page=1&sortBy=title:DESC&search=i&filter.early_access=$not:true",
                        "description": "first page"
                    },
                    "previous": {
                        "type": "string",
                        "example": "http://localhost:8080/games?limit=5&page=1&sortBy=title:DESC&search=i&filter.early_access=$not:true",
                        "description": "previous page"
                    },
                    "current": {
                        "type": "string",
                        "example": "http://localhost:8080/games?limit=5&page=2&sortBy=title:DESC&search=i&filter.early_access=$not:true",
                        "description": "current page"
                    },
                    "next": {
                        "type": "string",
                        "example": "http://localhost:8080/games?limit=5&page=3&sortBy=title:DESC&search=i&filter.early_access=$not:true",
                        "description": "next page"
                    },
                    "last": {
                        "type": "string",
                        "example": "http://localhost:8080/games?limit=5&page=3&sortBy=title:DESC&search=i&filter.early_access=$not:true",
                        "description": "last page"
                    }
                },
                "required": [
                    "current"
                ]
            },
            "PaginatedEntity": {
                "type": "object",
                "properties": {
                    "meta": {
                        "description": "metadata of this list",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Metadata"
                            }
                        ]
                    },
                    "links": {
                        "description": "links to related queries",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Links"
                            }
                        ]
                    }
                },
                "required": [
                    "meta",
                    "links"
                ]
            },
            "StreamableFile": {
                "type": "object",
                "properties": {}
            },
            "MapGameDto": {
                "type": "object",
                "properties": {
                    "provider_slug": {
                        "type": "string",
                        "description": "slug (url-friendly name) of the provider. This is the primary identifier. Must be formatted like a valid slug.",
                        "example": "igdb"
                    },
                    "provider_data_id": {
                        "type": "string",
                        "description": "id of the target game from the provider. If not provided, the metadata for the specified provider will be unmapped.",
                        "example": "1234"
                    },
                    "provider_priority": {
                        "type": "number",
                        "description": "used to override the priority of usage for this provider. Lower priority providers are tried first, while higher priority providers fill in gaps."
                    }
                },
                "required": [
                    "provider_slug",
                    "provider_priority"
                ]
            },
            "UpdateGameUserMetadataDto": {
                "type": "object",
                "properties": {
                    "age_rating": {
                        "type": "number",
                        "description": "the minimum age required to play the game",
                        "example": 18,
                        "default": 0
                    },
                    "title": {
                        "type": "string",
                        "description": "title of the game",
                        "example": "Grand Theft Auto V"
                    },
                    "sort_title": {
                        "type": "string",
                        "description": "sort title of the game, generated and used to optimize sorting.",
                        "example": "grand theft auto 5"
                    },
                    "release_date": {
                        "type": "string",
                        "description": "release date of the game as ISO8601 string",
                        "example": "2013-09-17T00:00:00.000Z"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the game. markdown supported.",
                        "example": "An open world action-adventure video game developed by **Rockstar North** and published by **Rockstar Games**."
                    },
                    "notes": {
                        "type": "string",
                        "description": "public notes from the admin for the game. markdown supported.",
                        "example": "# README \\n Install other game first!"
                    },
                    "average_playtime": {
                        "type": "number",
                        "description": "average playtime of other people in the game in minutes",
                        "example": 180
                    },
                    "cover": {
                        "description": "cover/boxart image of the game",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Media"
                            }
                        ]
                    },
                    "background": {
                        "description": "background image of the game",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Media"
                            }
                        ]
                    },
                    "rating": {
                        "type": "number",
                        "description": "rating of the provider",
                        "example": 90
                    },
                    "early_access": {
                        "type": "boolean",
                        "description": "indicates if the game is in early access",
                        "example": true
                    },
                    "launch_parameters": {
                        "type": "string",
                        "description": "Predefined launch parameters for the game.",
                        "example": "-fullscreen -dx11"
                    },
                    "launch_executable": {
                        "type": "string",
                        "description": "Predefined launch executable for the game.",
                        "example": "ShooterGame.exe"
                    },
                    "installer_executable": {
                        "type": "string",
                        "description": "Predefined installer executable for the game.",
                        "example": "setup.exe"
                    },
                    "url_screenshots": {
                        "description": "URLs of externally hosted screenshots of the game",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url_trailers": {
                        "description": "URLs of externally hosted trailer videos of the game",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url_gameplays": {
                        "description": "URLs of externally hosted gameplay videos of the game",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "url_websites": {
                        "description": "URLs of websites of the game",
                        "example": "https://www.escapefromtarkov.com/",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "publishers": {
                        "description": "publishers of the game",
                        "type": "array",
                        "items": {
                            "type": "array"
                        }
                    },
                    "developers": {
                        "description": "developers of the game",
                        "type": "array",
                        "items": {
                            "type": "array"
                        }
                    },
                    "tags": {
                        "description": "tags of the game",
                        "type": "array",
                        "items": {
                            "type": "array"
                        }
                    },
                    "genres": {
                        "description": "genres of the game",
                        "type": "array",
                        "items": {
                            "type": "array"
                        }
                    }
                },
                "required": [
                    "early_access"
                ]
            },
            "UpdateGameDto": {
                "type": "object",
                "properties": {
                    "mapping_requests": {
                        "description": "The mapping requests. If not provided, the game will not be remapped or unmapped.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MapGameDto"
                        }
                    },
                    "user_metadata": {
                        "description": "The updated user metadata. If not provided, the games user_metadata will not be updated.",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/UpdateGameUserMetadataDto"
                            }
                        ]
                    }
                }
            },
            "MetadataProviderDto": {
                "type": "object",
                "properties": {
                    "slug": {
                        "type": "string",
                        "description": "slug (url-friendly name) of the provider. This is the primary identifier. Must be formatted like a valid slug.",
                        "example": "igdb"
                    },
                    "priority": {
                        "type": "number",
                        "description": "priority of usage for this provider. Lower priority providers are tried first, while higher priority providers fill in gaps."
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "whether this provider is enabled or not.",
                        "default": true
                    }
                },
                "required": [
                    "slug",
                    "priority",
                    "enabled"
                ]
            },
            "MinimalGameMetadataDto": {
                "type": "object",
                "properties": {
                    "provider_slug": {
                        "type": "string",
                        "description": "slug (url-friendly name) of the provider. This is the primary identifier. Must be formatted like a valid slug.",
                        "example": "igdb"
                    },
                    "provider_data_id": {
                        "type": "string",
                        "description": "id of the game from the provider",
                        "example": "Grand Theft Auto V"
                    },
                    "title": {
                        "type": "string",
                        "description": "title of the game",
                        "example": "Grand Theft Auto V"
                    },
                    "release_date": {
                        "format": "date-time",
                        "type": "string",
                        "description": "release date of the game",
                        "example": "2013-09-17T00:00:00.000Z"
                    },
                    "cover_url": {
                        "type": "string",
                        "description": "box image url of the game",
                        "example": "example.com/example.jpg"
                    },
                    "description": {
                        "type": "string",
                        "description": "description of the game. markdown supported.",
                        "example": "An open world action-adventure video game developed by **Rockstar North** and published by **Rockstar Games**."
                    }
                },
                "required": [
                    "provider_slug",
                    "title"
                ]
            },
            "String": {
                "type": "object",
                "properties": {}
            },
            "UpdateProgressDto": {
                "type": "object",
                "properties": {
                    "minutes_played": {
                        "type": "number",
                        "description": "minutes of progress in the game by the user, this can only be incremented or be equal to the current value",
                        "example": 22
                    },
                    "state": {
                        "type": "string",
                        "description": "the new state of the game progress",
                        "enum": [
                            "UNPLAYED",
                            "INFINITE",
                            "PLAYING",
                            "COMPLETED",
                            "ABORTED_TEMPORARY",
                            "ABORTED_PERMANENT"
                        ],
                        "example": "PLAYING"
                    }
                }
            }
        }
    },
    "externalDocs": {
        "description": "Documentation",
        "url": "https://gamevau.lt"
    }
}